###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        05/Jun/2016  22:18:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpg_common\application\user_app2.c
#    Command line =  
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpg_common\application\user_app2.c
#        -D MPGL1 -D MPG1 --preprocess=cl
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        E:\EIE\bbb\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I E:\EIE\bbb\arm\CMSIS\Include\
#    List file    =  
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\List\user_app2.lst
#    Object file  =  
#        C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app2.o
#
###############################################################################

C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpg_common\application\user_app2.c
      1          /**********************************************************************************************************************
      2          File: user_app2.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app2 as a template:
      6           1. Copy both user_app2.c and user_app2.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app2" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp2" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP2" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app2.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp2Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp2RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp2Flags;                       /* Global state flags */
   \                     G_u32UserApp2Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          extern u8 G_au8DebugScanfBuffer[];                     /* From debug.c */
     56          extern u8 G_u8DebugScanfCharCount;                     /* From debug.c  */
     57          
     58          /***********************************************************************************************************************
     59          Global variable definitions with scope limited to this local application.
     60          Variable names shall start with "UserApp2_" and be declared as static.
     61          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     62          static fnCode_type UserApp2_StateMachine;            /* The state machine function pointer */
   \                     UserApp2_StateMachine:
   \   00000000                      DS8 4
     63          static u32 UserApp2_u32Timeout;                      /* Timeout counter used across states */
     64          

   \                                 In section .bss, align 4
     65          static u8 UserApp2_au8UserInputBuffer[USER_INPUT_BUFFER_SIZE];  /* Char buffer */
   \                     UserApp2_au8UserInputBuffer:
   \   00000000                      DS8 132
     66          

   \                                 In section .bss, align 1
     67          static u8 CursorPosition;
   \                     CursorPosition:
   \   00000000                      DS8 1
     68          /**********************************************************************************************************************
     69          Function Definitions
     70          **********************************************************************************************************************/
     71          
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          /* Public functions                                                                                                   */
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          
     76          
     77          /*--------------------------------------------------------------------------------------------------------------------*/
     78          /* Protected functions                                                                                                */
     79          /*--------------------------------------------------------------------------------------------------------------------*/
     80          
     81          /*--------------------------------------------------------------------------------------------------------------------
     82          Function: UserApp2Initialize
     83          
     84          Description:
     85          Initializes the State Machine and its variables.
     86          
     87          Requires:
     88            -
     89          
     90          Promises:
     91            - 
     92          */

   \                                 In section .text, align 2, keep-with-next
     93          void UserApp2Initialize(void)
     94          {
   \                     UserApp2Initialize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     95            LCDClearChars(LINE1_START_ADDR,20);
   \   00000004   0x2114             MOVS     R1,#+20
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       LCDClearChars
     96            
     97            LedOn(LCD_RED);
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       LedOn
     98            LedOff(LCD_GREEN);
   \   00000012   0x2009             MOVS     R0,#+9
   \   00000014   0x.... 0x....      BL       LedOff
     99            LedOn(LCD_BLUE);
   \   00000018   0x200A             MOVS     R0,#+10
   \   0000001A   0x.... 0x....      BL       LedOn
    100          
    101            u8 au8Message[] = "     Liuweifeng";
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable2
   \   00000022   0x2210             MOVS     R2,#+16
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
    102            LCDMessage(LINE1_START_ADDR, au8Message);
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      BL       LCDMessage
    103            
    104            static u8 u8BufferMessage[]   = "\n\rBuffer contents:\n\r";
    105            DebugPrintf(u8BufferMessage);
   \   00000030   0x....             LDR.N    R0,??DataTable2_1
   \   00000032   0x.... 0x....      BL       DebugPrintf
    106            
    107            for(u8 i = 0; i < USER_INPUT_BUFFER_SIZE; i++)
   \   00000036   0x2000             MOVS     R0,#+0
   \                     ??UserApp2Initialize_0: (+1)
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x2881             CMP      R0,#+129
   \   0000003C   0xDA05             BGE.N    ??UserApp2Initialize_1
    108            {
    109              UserApp2_au8UserInputBuffer[i] = '\0';
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x....             LDR.N    R2,??DataTable2_2
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x5481             STRB     R1,[R0, R2]
    110            }
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0xE7F6             B.N      ??UserApp2Initialize_0
    111          
    112            CursorPosition = 0;
   \                     ??UserApp2Initialize_1: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable2_3
   \   0000004E   0x7008             STRB     R0,[R1, #+0]
    113          
    114            /* If good initialization, set state to Idle */
    115            if( 1 )
    116            {
    117              UserApp2_StateMachine = UserApp2SM_Idle;
   \   00000050   0x.... 0x....      ADR.W    R0,UserApp2SM_Idle
   \   00000054   0x....             LDR.N    R1,??DataTable2_4
   \   00000056   0x6008             STR      R0,[R1, #+0]
    118            }
    119            else
    120            {
    121              /* The task isn't properly initialized, so shut it down and don't run */
    122              UserApp2_StateMachine = UserApp2SM_FailedInit;
    123            }
    124          
    125          } /* end UserApp2Initialize() */
   \   00000058   0xB005             ADD      SP,SP,#+20
   \   0000005A   0xBD00             POP      {PC}             ;; return

   \                                 In section .data, align 4
   \                     ??u8BufferMessage:
   \   00000000   0x0A 0x0D          DC8 "\012\015Buffer contents:\012\015"
   \              0x42 0x75    
   \              0x66 0x66    
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x65    
   \              0x6E 0x74    
   \              0x73 0x3A    
   \              0x0A 0x0D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    126          
    127          
    128          /*----------------------------------------------------------------------------------------------------------------------
    129          Function UserApp2RunActiveState()
    130          
    131          Description:
    132          Selects and runs one iteration of the current state in the state machine.
    133          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    134          may take 1ms / n to execute.
    135          
    136          Requires:
    137            - State machine function pointer points at current state
    138          
    139          Promises:
    140            - Calls the function to pointed by the state machine function pointer
    141          */

   \                                 In section .text, align 2, keep-with-next
    142          void UserApp2RunActiveState(void)
    143          {
   \                     UserApp2RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    144            UserApp2_StateMachine();
   \   00000002   0x....             LDR.N    R0,??DataTable2_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    145          
    146          } /* end UserApp2RunActiveState */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    147          
    148          
    149          /*--------------------------------------------------------------------------------------------------------------------*/
    150          /* Private functions                                                                                                  */
    151          /*--------------------------------------------------------------------------------------------------------------------*/
    152          
    153          
    154          /**********************************************************************************************************************
    155          State Machine Function Definitions
    156          **********************************************************************************************************************/
    157          
    158          /*-------------------------------------------------------------------------------------------------------------------*/
    159          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    160          static void UserApp2SM_Idle(void)
    161          {
   \                     UserApp2SM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    162            static u8 u8NumCharsMessage[] = "\n\rTotal characters received: ";
    163            static u8 u8NextLine[]={"\n\r"};
    164            static u8 u8Clearcount[]={"\n\rCharacter count has been cleared!\n\r"};
    165            static u8 u8CurrentLetter[]={"\n\rThe current letter:\n\r"};
    166            static u8 u8counter=0;
    167            static u8 u8counter1=0;
    168            static u8 u8counter2=0;
    169            static u8 u8NameIndex=0;
    170            static u8 u8InputNameIndex=0;
    171            static u8 u8InputNameCounter=0;
    172            static u8 u8InputName[200];
    173            static u8 u8InputMyNameCounter[10];
    174            static u8 u8TimeCounter[10];
    175            static u8 u8MyName[]={"Liuweifeng"};
    176            static u8 flag=FALSE;
    177            static u8 u8CharCount;
    178            static u32 u32InputMessagecounter=0;
    179            u8counter++;
   \   00000002   0x....             LDR.N    R0,??DataTable2_5
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable2_5
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    180            if(u8counter==50)
   \   0000000C   0x....             LDR.N    R0,??DataTable2_5
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2832             CMP      R0,#+50
   \   00000012   0xF040 0x810D      BNE.W    ??UserApp2SM_Idle_0
    181            { 
    182              if(flag)
   \   00000016   0x....             LDR.N    R0,??DataTable2_6
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD014             BEQ.N    ??UserApp2SM_Idle_1
    183              {
    184                u8counter1++;
   \   0000001E   0x....             LDR.N    R0,??DataTable2_7
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x....             LDR.N    R1,??DataTable2_7
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    185                if(u8counter1==100)
   \   00000028   0x....             LDR.N    R0,??DataTable2_7
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x2864             CMP      R0,#+100
   \   0000002E   0xD10B             BNE.N    ??UserApp2SM_Idle_1
    186                {
    187                  flag=FALSE;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x....             LDR.N    R1,??DataTable2_6
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    188                  u8counter1=0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable2_7
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    189                  LedOff(RED);
   \   0000003C   0x2007             MOVS     R0,#+7
   \   0000003E   0x.... 0x....      BL       LedOff
    190                  PWMAudioOff(BUZZER1);
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       PWMAudioOff
    191                }
    192              }
    193              u8counter=0;
   \                     ??UserApp2SM_Idle_1: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x....             LDR.N    R1,??DataTable2_5
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    194              u8CharCount = DebugScanf(UserApp2_au8UserInputBuffer);
   \   0000004E   0x....             LDR.N    R0,??DataTable2_2
   \   00000050   0x.... 0x....      BL       DebugScanf
   \   00000054   0x....             LDR.N    R1,??DataTable2_8
   \   00000056   0x7008             STRB     R0,[R1, #+0]
    195              UserApp2_au8UserInputBuffer[u8CharCount] = '\0'; 
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x....             LDR.N    R1,??DataTable2_2
   \   0000005C   0x....             LDR.N    R2,??DataTable2_8
   \   0000005E   0x7812             LDRB     R2,[R2, #+0]
   \   00000060   0x5450             STRB     R0,[R2, R1]
    196              if(u8CharCount>0)
   \   00000062   0x....             LDR.N    R0,??DataTable2_8
   \   00000064   0x7800             LDRB     R0,[R0, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xF000 0x80E2      BEQ.W    ??UserApp2SM_Idle_0
    197              {
    198                
    199                u32InputMessagecounter++;
   \   0000006C   0x....             LDR.N    R0,??DataTable2_9
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x....             LDR.N    R1,??DataTable2_9
   \   00000074   0x6008             STR      R0,[R1, #+0]
    200                if(CursorPosition==20)
   \   00000076   0x....             LDR.N    R0,??DataTable2_3
   \   00000078   0x7800             LDRB     R0,[R0, #+0]
   \   0000007A   0x2814             CMP      R0,#+20
   \   0000007C   0xD106             BNE.N    ??UserApp2SM_Idle_2
    201                {
    202                  CursorPosition=0;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x....             LDR.N    R1,??DataTable2_3
   \   00000082   0x7008             STRB     R0,[R1, #+0]
    203                  LCDClearChars(LINE2_START_ADDR, 20);
   \   00000084   0x2114             MOVS     R1,#+20
   \   00000086   0x2040             MOVS     R0,#+64
   \   00000088   0x.... 0x....      BL       LCDClearChars
    204                }
    205                LCDMessage(LINE2_START_ADDR+CursorPosition , UserApp2_au8UserInputBuffer);
   \                     ??UserApp2SM_Idle_2: (+1)
   \   0000008C   0x....             LDR.N    R1,??DataTable2_2
   \   0000008E   0x....             LDR.N    R0,??DataTable2_3
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x3040             ADDS     R0,R0,#+64
   \   00000094   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0x.... 0x....      BL       LCDMessage
    206                CursorPosition++;    
   \   0000009A   0x....             LDR.N    R0,??DataTable2_3
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0x....             LDR.N    R1,??DataTable2_3
   \   000000A2   0x7008             STRB     R0,[R1, #+0]
    207                if(UserApp2_au8UserInputBuffer[0]==u8MyName[u8NameIndex]||
    208                   (UserApp2_au8UserInputBuffer[0]-32)==u8MyName[u8NameIndex]||
    209                   (UserApp2_au8UserInputBuffer[0]+32)==u8MyName[u8NameIndex] )
   \   000000A4   0x....             LDR.N    R0,??DataTable2_2
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x....             LDR.N    R1,??DataTable2_10
   \   000000AA   0x....             LDR.N    R2,??DataTable2_11
   \   000000AC   0x7812             LDRB     R2,[R2, #+0]
   \   000000AE   0x5C51             LDRB     R1,[R2, R1]
   \   000000B0   0x4288             CMP      R0,R1
   \   000000B2   0xD012             BEQ.N    ??UserApp2SM_Idle_3
   \   000000B4   0x....             LDR.N    R0,??DataTable2_2
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x3820             SUBS     R0,R0,#+32
   \   000000BA   0x....             LDR.N    R1,??DataTable2_10
   \   000000BC   0x....             LDR.N    R2,??DataTable2_11
   \   000000BE   0x7812             LDRB     R2,[R2, #+0]
   \   000000C0   0x5C51             LDRB     R1,[R2, R1]
   \   000000C2   0x4288             CMP      R0,R1
   \   000000C4   0xD009             BEQ.N    ??UserApp2SM_Idle_3
   \   000000C6   0x....             LDR.N    R0,??DataTable2_2
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x3020             ADDS     R0,R0,#+32
   \   000000CC   0x....             LDR.N    R1,??DataTable2_10
   \   000000CE   0x....             LDR.N    R2,??DataTable2_11
   \   000000D0   0x7812             LDRB     R2,[R2, #+0]
   \   000000D2   0x5C51             LDRB     R1,[R2, R1]
   \   000000D4   0x4288             CMP      R0,R1
   \   000000D6   0xF040 0x80AB      BNE.W    ??UserApp2SM_Idle_0
    210                {   
    211                  u8InputName[u8InputNameIndex]=UserApp2_au8UserInputBuffer[0];
   \                     ??UserApp2SM_Idle_3: (+1)
   \   000000DA   0x....             LDR.N    R0,??DataTable2_2
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0x....             LDR.N    R1,??DataTable2_12
   \   000000E0   0x....             LDR.N    R2,??DataTable2_13
   \   000000E2   0x7812             LDRB     R2,[R2, #+0]
   \   000000E4   0x5450             STRB     R0,[R2, R1]
    212                  u8NameIndex++;
   \   000000E6   0x....             LDR.N    R0,??DataTable2_11
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x....             LDR.N    R1,??DataTable2_11
   \   000000EE   0x7008             STRB     R0,[R1, #+0]
    213                  u8InputNameIndex++;
   \   000000F0   0x....             LDR.N    R0,??DataTable2_13
   \   000000F2   0x7800             LDRB     R0,[R0, #+0]
   \   000000F4   0x1C40             ADDS     R0,R0,#+1
   \   000000F6   0x....             LDR.N    R1,??DataTable2_13
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
    214                  if(u8NameIndex==10)
   \   000000FA   0x....             LDR.N    R0,??DataTable2_11
   \   000000FC   0x7800             LDRB     R0,[R0, #+0]
   \   000000FE   0x280A             CMP      R0,#+10
   \   00000100   0xD102             BNE.N    ??UserApp2SM_Idle_4
    215                  {
    216                    u8NameIndex=0;
   \   00000102   0x2000             MOVS     R0,#+0
   \   00000104   0x....             LDR.N    R1,??DataTable2_11
   \   00000106   0x7008             STRB     R0,[R1, #+0]
    217                  }
    218                  if(u8InputNameIndex%10==0)
   \                     ??UserApp2SM_Idle_4: (+1)
   \   00000108   0x....             LDR.N    R0,??DataTable2_13
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0x210A             MOVS     R1,#+10
   \   0000010E   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000112   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xF040 0x808A      BNE.W    ??UserApp2SM_Idle_0
    219                  {
    220                    LCDClearChars(LINE2_START_ADDR, 20);
   \   0000011C   0x2114             MOVS     R1,#+20
   \   0000011E   0x2040             MOVS     R0,#+64
   \   00000120   0x.... 0x....      BL       LCDClearChars
    221                    CursorPosition=10;
   \   00000124   0x200A             MOVS     R0,#+10
   \   00000126   0x....             LDR.N    R1,??DataTable2_3
   \   00000128   0x7008             STRB     R0,[R1, #+0]
    222                    LCDMessage(LINE2_START_ADDR, u8MyName);
   \   0000012A   0x....             LDR.N    R1,??DataTable2_10
   \   0000012C   0x2040             MOVS     R0,#+64
   \   0000012E   0x.... 0x....      BL       LCDMessage
    223                    CursorPosition=CursorPosition+2;
   \   00000132   0x....             LDR.N    R0,??DataTable2_3
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0x1C80             ADDS     R0,R0,#+2
   \   00000138   0x....             LDR.N    R1,??DataTable2_3
   \   0000013A   0x7008             STRB     R0,[R1, #+0]
    224                    u8InputNameCounter++;
   \   0000013C   0x....             LDR.N    R0,??DataTable2_14
   \   0000013E   0x7800             LDRB     R0,[R0, #+0]
   \   00000140   0x1C40             ADDS     R0,R0,#+1
   \   00000142   0x....             LDR.N    R1,??DataTable2_14
   \   00000144   0x7008             STRB     R0,[R1, #+0]
    225                    u8InputMyNameCounter[0]=(u8InputNameCounter/100)+48;
   \   00000146   0x....             LDR.N    R0,??DataTable2_14
   \   00000148   0x7800             LDRB     R0,[R0, #+0]
   \   0000014A   0x2164             MOVS     R1,#+100
   \   0000014C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000150   0x3030             ADDS     R0,R0,#+48
   \   00000152   0x....             LDR.N    R1,??DataTable2_15
   \   00000154   0x7008             STRB     R0,[R1, #+0]
    226                    u8InputMyNameCounter[1]=(u8InputNameCounter%100/10)+48;
   \   00000156   0x....             LDR.N    R0,??DataTable2_14
   \   00000158   0x7800             LDRB     R0,[R0, #+0]
   \   0000015A   0x2164             MOVS     R1,#+100
   \   0000015C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000160   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000164   0x210A             MOVS     R1,#+10
   \   00000166   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000016A   0x3030             ADDS     R0,R0,#+48
   \   0000016C   0x....             LDR.N    R1,??DataTable2_15
   \   0000016E   0x7048             STRB     R0,[R1, #+1]
    227                    u8InputMyNameCounter[2]=(u8InputNameCounter%10)+48;
   \   00000170   0x....             LDR.N    R0,??DataTable2_14
   \   00000172   0x7800             LDRB     R0,[R0, #+0]
   \   00000174   0x210A             MOVS     R1,#+10
   \   00000176   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000017A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000017E   0x3030             ADDS     R0,R0,#+48
   \   00000180   0x....             LDR.N    R1,??DataTable2_15
   \   00000182   0x7088             STRB     R0,[R1, #+2]
    228                    u8InputMyNameCounter[3]='\0';  
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0x....             LDR.N    R1,??DataTable2_15
   \   00000188   0x70C8             STRB     R0,[R1, #+3]
    229                    if(u8InputMyNameCounter[0]=='0')
   \   0000018A   0x....             LDR.N    R0,??DataTable2_15
   \   0000018C   0x7800             LDRB     R0,[R0, #+0]
   \   0000018E   0x2830             CMP      R0,#+48
   \   00000190   0xD117             BNE.N    ??UserApp2SM_Idle_5
    230                    {
    231                      if(u8InputMyNameCounter[1]=='0')
   \   00000192   0x....             LDR.N    R0,??DataTable2_15
   \   00000194   0x7840             LDRB     R0,[R0, #+1]
   \   00000196   0x2830             CMP      R0,#+48
   \   00000198   0xD107             BNE.N    ??UserApp2SM_Idle_6
    232                      {
    233                        u8TimeCounter[0]=u8InputMyNameCounter[2];
   \   0000019A   0x....             LDR.N    R0,??DataTable2_15
   \   0000019C   0x7880             LDRB     R0,[R0, #+2]
   \   0000019E   0x....             LDR.N    R1,??DataTable2_16
   \   000001A0   0x7008             STRB     R0,[R1, #+0]
    234                        u8counter2=1;
   \   000001A2   0x2001             MOVS     R0,#+1
   \   000001A4   0x....             LDR.N    R1,??DataTable2_17
   \   000001A6   0x7008             STRB     R0,[R1, #+0]
   \   000001A8   0xE01A             B.N      ??UserApp2SM_Idle_7
    235                      }
    236                      else
    237                      {
    238                        u8TimeCounter[0]=u8InputMyNameCounter[1];
   \                     ??UserApp2SM_Idle_6: (+1)
   \   000001AA   0x....             LDR.N    R0,??DataTable2_15
   \   000001AC   0x7840             LDRB     R0,[R0, #+1]
   \   000001AE   0x....             LDR.N    R1,??DataTable2_16
   \   000001B0   0x7008             STRB     R0,[R1, #+0]
    239                        u8TimeCounter[1]=u8InputMyNameCounter[2];
   \   000001B2   0x....             LDR.N    R0,??DataTable2_15
   \   000001B4   0x7880             LDRB     R0,[R0, #+2]
   \   000001B6   0x....             LDR.N    R1,??DataTable2_16
   \   000001B8   0x7048             STRB     R0,[R1, #+1]
    240                        u8counter2=2;
   \   000001BA   0x2002             MOVS     R0,#+2
   \   000001BC   0x....             LDR.N    R1,??DataTable2_17
   \   000001BE   0x7008             STRB     R0,[R1, #+0]
   \   000001C0   0xE00E             B.N      ??UserApp2SM_Idle_7
    241                      }
    242                    }
    243                    else
    244                    {
    245                      u8TimeCounter[0]=u8InputMyNameCounter[0];
   \                     ??UserApp2SM_Idle_5: (+1)
   \   000001C2   0x....             LDR.N    R0,??DataTable2_15
   \   000001C4   0x7800             LDRB     R0,[R0, #+0]
   \   000001C6   0x....             LDR.N    R1,??DataTable2_16
   \   000001C8   0x7008             STRB     R0,[R1, #+0]
    246                      u8TimeCounter[1]=u8InputMyNameCounter[1];
   \   000001CA   0x....             LDR.N    R0,??DataTable2_15
   \   000001CC   0x7840             LDRB     R0,[R0, #+1]
   \   000001CE   0x....             LDR.N    R1,??DataTable2_16
   \   000001D0   0x7048             STRB     R0,[R1, #+1]
    247                      u8TimeCounter[2]=u8InputMyNameCounter[2];
   \   000001D2   0x....             LDR.N    R0,??DataTable2_15
   \   000001D4   0x7880             LDRB     R0,[R0, #+2]
   \   000001D6   0x....             LDR.N    R1,??DataTable2_16
   \   000001D8   0x7088             STRB     R0,[R1, #+2]
    248                      u8counter2=3;
   \   000001DA   0x2003             MOVS     R0,#+3
   \   000001DC   0x....             LDR.N    R1,??DataTable2_17
   \   000001DE   0x7008             STRB     R0,[R1, #+0]
    249                    }          
    250                    LCDMessage(LINE2_START_ADDR+CursorPosition, u8TimeCounter);
   \                     ??UserApp2SM_Idle_7: (+1)
   \   000001E0   0x....             LDR.N    R1,??DataTable2_16
   \   000001E2   0x....             LDR.N    R0,??DataTable2_3
   \   000001E4   0x7800             LDRB     R0,[R0, #+0]
   \   000001E6   0x3040             ADDS     R0,R0,#+64
   \   000001E8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001EA   0x.... 0x....      BL       LCDMessage
    251                    LCDMessage(LINE2_START_ADDR+CursorPosition+u8counter2, "time");
   \   000001EE   0x....             LDR.N    R1,??DataTable2_18
   \   000001F0   0x....             LDR.N    R0,??DataTable2_3
   \   000001F2   0x7800             LDRB     R0,[R0, #+0]
   \   000001F4   0x....             LDR.N    R2,??DataTable2_17
   \   000001F6   0x7812             LDRB     R2,[R2, #+0]
   \   000001F8   0x1810             ADDS     R0,R2,R0
   \   000001FA   0x3040             ADDS     R0,R0,#+64
   \   000001FC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001FE   0x.... 0x....      BL       LCDMessage
    252                    CursorPosition=CursorPosition+u8counter2+5;
   \   00000202   0x....             LDR.N    R0,??DataTable2_3
   \   00000204   0x7800             LDRB     R0,[R0, #+0]
   \   00000206   0x....             LDR.N    R1,??DataTable2_17
   \   00000208   0x7809             LDRB     R1,[R1, #+0]
   \   0000020A   0x1D49             ADDS     R1,R1,#+5
   \   0000020C   0x1808             ADDS     R0,R1,R0
   \   0000020E   0x....             LDR.N    R1,??DataTable2_3
   \   00000210   0x7008             STRB     R0,[R1, #+0]
    253                    PWMAudioOn(BUZZER1);
   \   00000212   0x2001             MOVS     R0,#+1
   \   00000214   0x.... 0x....      BL       PWMAudioOn
    254                    PWMAudioSetFrequency(BUZZER1, 500);
   \   00000218   0xF44F 0x71FA      MOV      R1,#+500
   \   0000021C   0x2001             MOVS     R0,#+1
   \   0000021E   0x.... 0x....      BL       PWMAudioSetFrequency
    255                    LedBlink(RED, LED_2HZ);
   \   00000222   0x21FA             MOVS     R1,#+250
   \   00000224   0x2007             MOVS     R0,#+7
   \   00000226   0x.... 0x....      BL       LedBlink
    256                    flag=TRUE;
   \   0000022A   0x2001             MOVS     R0,#+1
   \   0000022C   0x....             LDR.N    R1,??DataTable2_6
   \   0000022E   0x7008             STRB     R0,[R1, #+0]
    257                  }
    258                }
    259              }
    260            }
    261            if(WasButtonPressed(BUTTON0))
   \                     ??UserApp2SM_Idle_0: (+1)
   \   00000230   0x2000             MOVS     R0,#+0
   \   00000232   0x.... 0x....      BL       WasButtonPressed
   \   00000236   0x2800             CMP      R0,#+0
   \   00000238   0xD009             BEQ.N    ??UserApp2SM_Idle_8
    262            {
    263              ButtonAcknowledge(BUTTON0);
   \   0000023A   0x2000             MOVS     R0,#+0
   \   0000023C   0x.... 0x....      BL       ButtonAcknowledge
    264              CursorPosition=0;
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x....             LDR.N    R1,??DataTable2_3
   \   00000244   0x7008             STRB     R0,[R1, #+0]
    265              LCDClearChars(LINE2_START_ADDR, 20);
   \   00000246   0x2114             MOVS     R1,#+20
   \   00000248   0x2040             MOVS     R0,#+64
   \   0000024A   0x.... 0x....      BL       LCDClearChars
    266            }
    267            if(WasButtonPressed(BUTTON1))
   \                     ??UserApp2SM_Idle_8: (+1)
   \   0000024E   0x2001             MOVS     R0,#+1
   \   00000250   0x.... 0x....      BL       WasButtonPressed
   \   00000254   0x2800             CMP      R0,#+0
   \   00000256   0xD00C             BEQ.N    ??UserApp2SM_Idle_9
    268            {
    269              ButtonAcknowledge(BUTTON1);
   \   00000258   0x2001             MOVS     R0,#+1
   \   0000025A   0x.... 0x....      BL       ButtonAcknowledge
    270              
    271              /* Read the buffer and print the contents */
    272              DebugPrintf(u8NumCharsMessage);
   \   0000025E   0x....             LDR.N    R0,??DataTable2_19
   \   00000260   0x.... 0x....      BL       DebugPrintf
    273              DebugPrintNumber(u32InputMessagecounter);
   \   00000264   0x....             LDR.N    R0,??DataTable2_9
   \   00000266   0x6800             LDR      R0,[R0, #+0]
   \   00000268   0x.... 0x....      BL       DebugPrintNumber
    274              DebugPrintf(u8NextLine);
   \   0000026C   0x....             LDR.N    R0,??DataTable2_20
   \   0000026E   0x.... 0x....      BL       DebugPrintf
    275            }
    276             if(WasButtonPressed(BUTTON2))
   \                     ??UserApp2SM_Idle_9: (+1)
   \   00000272   0x2002             MOVS     R0,#+2
   \   00000274   0x.... 0x....      BL       WasButtonPressed
   \   00000278   0x2800             CMP      R0,#+0
   \   0000027A   0xD008             BEQ.N    ??UserApp2SM_Idle_10
    277            {
    278              ButtonAcknowledge(BUTTON2);
   \   0000027C   0x2002             MOVS     R0,#+2
   \   0000027E   0x.... 0x....      BL       ButtonAcknowledge
    279              u32InputMessagecounter=0;
   \   00000282   0x2000             MOVS     R0,#+0
   \   00000284   0x....             LDR.N    R1,??DataTable2_9
   \   00000286   0x6008             STR      R0,[R1, #+0]
    280              DebugPrintf(u8Clearcount);
   \   00000288   0x....             LDR.N    R0,??DataTable2_21
   \   0000028A   0x.... 0x....      BL       DebugPrintf
    281            }
    282            if(WasButtonPressed(BUTTON3))
   \                     ??UserApp2SM_Idle_10: (+1)
   \   0000028E   0x2003             MOVS     R0,#+3
   \   00000290   0x.... 0x....      BL       WasButtonPressed
   \   00000294   0x2800             CMP      R0,#+0
   \   00000296   0xD00B             BEQ.N    ??UserApp2SM_Idle_11
    283            {
    284              ButtonAcknowledge(BUTTON3);
   \   00000298   0x2003             MOVS     R0,#+3
   \   0000029A   0x.... 0x....      BL       ButtonAcknowledge
    285              DebugPrintf(u8CurrentLetter);
   \   0000029E   0x....             LDR.N    R0,??DataTable2_22
   \   000002A0   0x.... 0x....      BL       DebugPrintf
    286              DebugPrintf(u8InputName);
   \   000002A4   0x....             LDR.N    R0,??DataTable2_12
   \   000002A6   0x.... 0x....      BL       DebugPrintf
    287              DebugPrintf(u8NextLine);
   \   000002AA   0x....             LDR.N    R0,??DataTable2_20
   \   000002AC   0x.... 0x....      BL       DebugPrintf
    288            }
    289            
    290          } /* end UserApp2SM_Idle() */
   \                     ??UserApp2SM_Idle_11: (+1)
   \   000002B0   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??u8NumCharsMessage:
   \   00000000   0x0A 0x0D          DC8 "\012\015Total characters received: "
   \              0x54 0x6F    
   \              0x74 0x61    
   \              0x6C 0x20    
   \              0x63 0x68    
   \              0x61 0x72    
   \              0x61 0x63    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 4
   \                     ??u8NextLine:
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .data, align 4
   \                     ??u8Clearcount:
   \   00000000   0x0A 0x0D          DC8 "\012\015Character count has been cleared!\012\015"
   \              0x43 0x68    
   \              0x61 0x72    
   \              0x61 0x63    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x63 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x68 0x61    
   \              0x73 0x20    
   \              0x62 0x65    
   \              0x65 0x6E    
   \              0x20 0x63    
   \              0x6C 0x65    
   \              0x61 0x72    
   \              0x65 0x64    
   \              0x21 0x0A    
   \              0x0D 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 4
   \                     ??u8CurrentLetter:
   \   00000000   0x0A 0x0D          DC8 "\012\015The current letter:\012\015"
   \              0x54 0x68    
   \              0x65 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x6C 0x65    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x3A 0x0A    
   \              0x0D 0x00    

   \                                 In section .bss, align 1
   \                     ??u8counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8counter1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8NameIndex:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8InputNameIndex:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8InputNameCounter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??u8InputName:
   \   00000000                      DS8 200

   \                                 In section .bss, align 4
   \                     ??u8InputMyNameCounter:
   \   00000000                      DS8 12

   \                                 In section .bss, align 4
   \                     ??u8TimeCounter:
   \   00000000                      DS8 12

   \                                 In section .data, align 4
   \                     ??u8MyName:
   \   00000000   0x4C 0x69          DC8 "Liuweifeng"
   \              0x75 0x77    
   \              0x65 0x69    
   \              0x66 0x65    
   \              0x6E 0x67    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .bss, align 1
   \                     ??flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??u8CharCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??u32InputMessagecounter:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ??u8BufferMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     UserApp2_au8UserInputBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     CursorPosition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     UserApp2_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ??u8counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ??flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ??u8counter1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ??u8CharCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     ??u32InputMessagecounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ??u8MyName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     ??u8NameIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     ??u8InputName

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     ??u8InputNameIndex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x........         DC32     ??u8InputNameCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x........         DC32     ??u8InputMyNameCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     ??u8TimeCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x........         DC32     ??u8counter2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     ??u8NumCharsMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     ??u8NextLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     ??u8Clearcount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x........         DC32     ??u8CurrentLetter

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x20 0x20          DC8 "     Liuweifeng"
   \              0x20 0x20    
   \              0x20 0x4C    
   \              0x69 0x75    
   \              0x77 0x65    
   \              0x69 0x66    
   \              0x65 0x6E    
   \              0x67 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x74 0x69          DC8 "time"
   \              0x6D 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    291               
    292          
    293          /*-------------------------------------------------------------------------------------------------------------------*/
    294          /* Handle an error */
    295          static void UserApp2SM_Error(void)          
                             ^
Warning[Pe177]: function "UserApp2SM_Error" was declared but never referenced

  static u32 UserApp2_u32Timeout;                      /* Timeout counter used across states */
             ^
"C:\Users\weifeng\Desktop\EIE\EIE_Git\Razor_Atmel\firmware_mpg_common\application\user_app2.c",63  Warning[Pe177]: 
          variable "UserApp2_u32Timeout" was declared but never referenced
    296          {
    297            
    298          } /* end UserApp2SM_Error() */
    299          
    300          
    301          /*-------------------------------------------------------------------------------------------------------------------*/
    302          /* State to sit in if init failed */
    303          static void UserApp2SM_FailedInit(void)          
    304          {
    305              
    306          } /* end UserApp2SM_FailedInit() */
    307          
    308          
    309          /*--------------------------------------------------------------------------------------------------------------------*/
    310          /* End of File                                                                                                        */
    311          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   UserApp2Initialize
        24   -> DebugPrintf
        24   -> LCDClearChars
        24   -> LCDMessage
        24   -> LedOff
        24   -> LedOn
        24   -> __aeabi_memcpy4
       8   UserApp2RunActiveState
         8   -- Indirect call
       8   UserApp2SM_Idle
         8   -> ButtonAcknowledge
         8   -> DebugPrintNumber
         8   -> DebugPrintf
         8   -> DebugScanf
         8   -> LCDClearChars
         8   -> LCDMessage
         8   -> LedBlink
         8   -> LedOff
         8   -> PWMAudioOff
         8   -> PWMAudioOn
         8   -> PWMAudioSetFrequency
         8   -> WasButtonPressed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  ?_0
       8  ?_1
       1  CursorPosition
       4  G_u32UserApp2Flags
      92  UserApp2Initialize
      10  UserApp2RunActiveState
     690  UserApp2SM_Idle
       4  UserApp2_StateMachine
     132  UserApp2_au8UserInputBuffer
       1  flag
       4  u32InputMessagecounter
      24  u8BufferMessage
       1  u8CharCount
      40  u8Clearcount
      24  u8CurrentLetter
      12  u8InputMyNameCounter
     200  u8InputName
       1  u8InputNameCounter
       1  u8InputNameIndex
      12  u8MyName
       1  u8NameIndex
       4  u8NextLine
      32  u8NumCharsMessage
      12  u8TimeCounter
       1  u8counter
       1  u8counter1
       1  u8counter2

 
 377 bytes in section .bss
 136 bytes in section .data
  24 bytes in section .rodata
 884 bytes in section .text
 
 884 bytes of CODE  memory
  24 bytes of CONST memory
 513 bytes of DATA  memory

Errors: none
Warnings: 2
